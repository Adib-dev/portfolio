/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/models/67019f4638baf663fcc3c555.glb
*/
"use client";

import React, { useCallback, useEffect, useRef, useState } from "react";
import { useGraph, useFrame } from "@react-three/fiber";
import { useFBX, useGLTF, useAnimations } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import * as THREE from "three";

export function Avatar(props: any) {
  const { scene } = useGLTF("models/67019f4638baf663fcc3c555.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);

  const group = useRef();
  const { nodes, materials } = useGraph(clone);

  const { animations: standUp } = useFBX("animations/Stand Up.fbx");

  const { animations: bored } = useFBX("animations/Bored.fbx");
  const { animations: typing } = useFBX("animations/Typing.fbx");

  standUp[0].name = "Stand Up";
  bored[0].name = "Bored";
  typing[0].name = "Typing";

  const { actions, mixer } = useAnimations(
    [standUp[0], bored[0], typing[0]],
    group
  );

  const activities = ["Typing"];
  const randomIndex = Math.floor(Math.random() * activities.length);
  const activity = activities[randomIndex];

  // Track animation state to prevent loops
  const [standUpFinished, setStandUpFinished] = useState(false);

  // Helper to handle smooth transition between animations
  // const fadeToAction = (from, to, duration = 0.5) => {
  //   if (actions[from] && actions[to]) {
  //     actions[from]?.fadeOut(duration);
  //     actions[to]?.reset().fadeIn(duration).play();
  //   }
  // };

  const fadeToAction = useCallback(
    (from: string, to: string, duration = 0.5) => {
      if (actions[from] && actions[to]) {
        actions[from]?.fadeOut(duration);
        actions[to]?.reset().fadeIn(duration).play();
      }
    },
    [actions]
  );

  useEffect(() => {
    if (actions[activity]) {
      // Play Sitting Talking animation for 15 seconds
      actions[activity].reset().fadeIn(0.5).play();

      setTimeout(() => {
        if (actions["Stand Up"]) {
          // Transition to Stand Up after Sitting Talking
          fadeToAction(activity, "Stand Up", 1.0);

          // Ensure Stand Up only plays once
          actions["Stand Up"].setLoop(THREE.LoopOnce, 1);
          actions["Stand Up"].clampWhenFinished = true;
          actions["Stand Up"].play();

          // Add event listener to detect when Stand Up animation finishes
          mixer.addEventListener("finished", (e) => {
            if (e.action._clip.name === "Stand Up") {
              setStandUpFinished(true);

              // Transition to Bored

              if (actions["Bored"]) {
                fadeToAction("Stand Up", "Bored", 1.0);
              }
            }
          });
        }
      }, 15000); // 15 seconds for Sitting Talking
    }
  }, [actions, mixer, activity, fadeToAction]);

  return (
    <group {...props} ref={group} dispose={null}>
      <group>
        <primitive object={nodes.Hips} />
        <skinnedMesh
          geometry={(nodes.Wolf3D_Hair as THREE.SkinnedMesh).geometry}
          material={materials.Wolf3D_Hair}
          skeleton={(nodes.Wolf3D_Hair as THREE.SkinnedMesh).skeleton}
        />
        <skinnedMesh
          geometry={(nodes.Wolf3D_Glasses as THREE.SkinnedMesh).geometry}
          material={materials.Wolf3D_Glasses}
          skeleton={(nodes.Wolf3D_Glasses as THREE.SkinnedMesh).skeleton}
        />
        <skinnedMesh
          geometry={(nodes.Wolf3D_Outfit_Top as THREE.SkinnedMesh).geometry}
          material={materials.Wolf3D_Outfit_Top}
          skeleton={(nodes.Wolf3D_Outfit_Top as THREE.SkinnedMesh).skeleton}
        />
        <skinnedMesh
          geometry={(nodes.Wolf3D_Outfit_Bottom as THREE.SkinnedMesh).geometry}
          material={materials.Wolf3D_Outfit_Bottom}
          skeleton={(nodes.Wolf3D_Outfit_Bottom as THREE.SkinnedMesh).skeleton}
        />
        <skinnedMesh
          geometry={
            (nodes.Wolf3D_Outfit_Footwear as THREE.SkinnedMesh).geometry
          }
          material={materials.Wolf3D_Outfit_Footwear}
          skeleton={
            (nodes.Wolf3D_Outfit_Footwear as THREE.SkinnedMesh).skeleton
          }
        />
        <skinnedMesh
          geometry={(nodes.Wolf3D_Body as THREE.SkinnedMesh).geometry}
          material={materials.Wolf3D_Body}
          skeleton={(nodes.Wolf3D_Body as THREE.SkinnedMesh).skeleton}
        />
        <skinnedMesh
          name="EyeLeft"
          geometry={(nodes.EyeLeft as THREE.SkinnedMesh).geometry}
          material={materials.Wolf3D_Eye}
          skeleton={(nodes.EyeLeft as THREE.SkinnedMesh).skeleton}
          morphTargetDictionary={
            (nodes.EyeLeft as THREE.SkinnedMesh).morphTargetDictionary
          }
          morphTargetInfluences={
            (nodes.EyeLeft as THREE.SkinnedMesh).morphTargetInfluences
          }
        />
        <skinnedMesh
          name="EyeRight"
          geometry={(nodes.EyeRight as THREE.SkinnedMesh).geometry}
          material={materials.Wolf3D_Eye}
          skeleton={(nodes.EyeRight as THREE.SkinnedMesh).skeleton}
          morphTargetDictionary={
            (nodes.EyeRight as THREE.SkinnedMesh).morphTargetDictionary
          }
          morphTargetInfluences={
            (nodes.EyeRight as THREE.SkinnedMesh).morphTargetInfluences
          }
        />
        <skinnedMesh
          name="Wolf3D_Head"
          geometry={(nodes.Wolf3D_Head as THREE.SkinnedMesh).geometry}
          material={materials.Wolf3D_Skin}
          skeleton={(nodes.Wolf3D_Head as THREE.SkinnedMesh).skeleton}
          morphTargetDictionary={
            (nodes.Wolf3D_Head as THREE.SkinnedMesh).morphTargetDictionary
          }
          morphTargetInfluences={
            (nodes.Wolf3D_Head as THREE.SkinnedMesh).morphTargetInfluences
          }
        />
        <skinnedMesh
          name="Wolf3D_Teeth"
          geometry={(nodes.Wolf3D_Teeth as THREE.SkinnedMesh).geometry}
          material={materials.Wolf3D_Teeth}
          skeleton={(nodes.Wolf3D_Teeth as THREE.SkinnedMesh).skeleton}
          morphTargetDictionary={
            (nodes.Wolf3D_Teeth as THREE.SkinnedMesh).morphTargetDictionary
          }
          morphTargetInfluences={
            (nodes.Wolf3D_Teeth as THREE.SkinnedMesh).morphTargetInfluences
          }
        />
      </group>
    </group>
  );
}

useGLTF.preload("models/67019f4638baf663fcc3c555.glb");
